#!/bin/sh

# brodie's fork of dmenufm - so much better than the OG!
# https://github.com/BrodieRobertson/dmenufm

# Dmenu-based directory browser
# Dependency: dmenu; xclip

### OPTIONS AND VARIABLES

## OPTIONS
FM_PATH="$HOME/.config/dmenufm"
FM_TRASH_PATH="$FM_PATH/trash"
BMKFILE="$FM_PATH/dmenufm_bookmark"
CMDFILE="$FM_PATH/dmenufm_command"
HISFILE="$FM_PATH/dmenufm_history"
LASTPATHFILE="$FM_PATH/dmenufm_lastpath"
MAX_HIS_LENGTH=5000
XDGDIR1="/usr/share/applications"
XDGDIR2="/usr/local/share/applications"
# FONT
GENEFONT="Roboto Nerd Font Mono-8"
NOTIFONT="Roboto Mono Nerd Font-8"
DANGERFONT="Roboto Mono Nerd Font-8"


## GLOBAL VARIABLES
CHOICE="placeholder"
actCHOICE="placeholder"
TARGET="./"
BACKWARD="../"
ACTION="Actions"
TERM="Terminal"
FM_CP_PATH="PCP - Copy path"
FM_NEW="NEW - Create new file / directory"
FM_RM="RMM - Remove files / directory"
FM_MVR="MVR - Move files"
FM_TRASH="TRH - Trash of dmenufm"
FM_HIST="HIS - History of dmenufm"
FM_BMARK="BMK - Bookmark for dmenufm"
FM_COMMAND="CMD - Frequently used command"
ACTLIST="$FM_CP_PATH:$FM_NEW:$FM_MVR:$FM_RM:$FM_TRASH:$FM_HIST:$FM_BMARK:$FM_COMMAND"



### FUNCTIONS


## OPEN FUNCTIONS

# You may need to modify executecmd to match how your terminal execute the command.
# Use `< $(locate $software.desktop | tail -n 1) grep "Terminal=false` to check whether the .desktop file should open in terminal
# Like sxiv, the desktop file don't have Terminal entry. You need to Use `< $(locate sxiv.desktop | tail -n 1) sudo $EDITOR` to add `Terminal=false`
executecmd () {
	software=$(printf '%s' "$1" | awk -F ' ' '{print $1}')
	if < "$(find "$XDGDIR1" "$XDGDIR2" *"$software"*.desktop | tail -n 1)" grep "Terminal=false"; then
		printf '%s' "$1" | ${SHELL:-"/bin/sh"}
	else
		$TERMINAL -e $1 | ${SHELL:-"/bin/sh"}
	fi
}

# Open files with xdg-open
# To edit default applications in xdg-open,
# sudo $EDITOR /usr/share/applications/mimeinfo.cache
openfile () {
	appdesktop=$(xdg-mime query filetype "$1" | xargs -I {} xdg-mime query default "{}")
	if < "$(find "$XDGDIR1" "$XDGDIR2" -name "$appdesktop" | tail -n 1)" grep "Terminal=false"; then
		xdg-open "$1"
	else
		$TERMINAL -e xdg-open "$1"
	fi
}


## MENUFUNCTIONS

# Generate directories
# Variables cannot store multiline string, so transform to ':'
# Misbehaving due to space in file/directory name, so add ' at beginning and end.
menudir () {
	DIRs=$(for dir in *; do [ -d "$dir" ] && printf '%s:' "$dir/"; done | sed "1 s/^/'/; s/$/'/")
}

# Generate dotdirectories
# Delete extra ./ and ../ (Need use = as sed delimiter)
menudotdir () {
	DOTDIRs=$(for dir in .*; do [ -d "$dir" ] && printf '%s:' "$dir/"; done | sed "1 s/^/'/; s/$/'/; s=./==; s=../==")
}

# Generate files
menufile () {
	FILEs=$(for file in *; do [ -f "$file" ] && printf '%s:' "$file"; done | sed "1 s/^/'/; s/$/'/")
}

# Generate dotfiles
menudotfile () {
	DOTFILEs=$(for file in .*; do [ -f "$file" ] && printf '%s:' "$file"; done | sed "1 s/^/'/; s/$/'/")
}

# Generate default menu
menu () {
	menudir
	menudotdir
	menufile
	menudotfile
}

# Update menu in each move
update_menu () {
	list=
	# Rebuild list in every move
	for element in $keeplist; do
		case $element in
			DIRs) menudir && list="$list$DIRs" ;;
			FILEs) menufile && list="$list$FILEs" ;;
			DOTDIRs) menudotdir && list="$list$DOTDIRs" ;;
			DOTFILEs) menudotfile && list="$list$DOTFILEs" ;;
		esac
	done
}

# Generate menu for action choice, only for current directory.
# $1 is the prompt, $2 is the selected background color
Generate_action_menu () {
	while [ -n "$actCHOICE" ]; do
		update_menu
		# Default menu list if no arguments given
		[ -z "$keeplist" ] && menu && list="$DIRs$FILEs$DOTDIRs$DOTFILEs"
		# Generate menu with/without arguments
		# Show only the current directory and one level of parent directory
		twopwd=$(printf '%s' "$PWD" | awk -F '/' '{print $(NF-1)"/"$NF}')
		actCHOICE=$(printf '%s:' "$BACKWARD" "$TARGET" "$list" | tr ':' '\n' | sed "s/'//g; /^$/ d" | verticalprompt "$1" "$2")
		# Outcome matching
		if [ "$actCHOICE" = "$TARGET" ]; then
			HERE=$(printf '%s' "$PWD")
			name=$(printf '%s' "$HERE" | awk -F '/' '{print $NF}')
			break
		elif [ "$actCHOICE" = "$BACKWARD" ]; then
			cd "../" || return
			dmenufm_history
		elif [ -d "$actCHOICE" ]; then
			cd "$actCHOICE" || exit 1
			dmenufm_history
			continue
		elif [ -f "$actCHOICE" ] || [ -n "$rename" ]; then
			HERE=$(printf '%s' "$PWD/$actCHOICE")
			name=$(printf '%s' "$HERE" | awk -F '/' '{print $NF}')
			break
		else
			HERE=
			name=
			actCHOICE="placeholder"
			break
		fi
	done
}

## PROMPT FUNCTIONS
verticalprompt () {
	# $1 is prompt
	dmenu -fn "$GENEFONT" -i -sb "$2" -l 25 -p "$1" -h 18
}

horizontalprompt () {
	# $1 is prompt
	dmenu -fn "$GENEFONT" -i -sb "$2" -p "$1" -h 18
}

notifyprompt () {
	dmenu -fn "$NOTIFONT" -sb "#d79921" -sf "#1d2021" -nf "#000000" -nb "#000000" -p "$1" -h 18 <&-
}

# Prompt that used in dangerous action
dangerprompt () {
	# From Luke Smith
	# Use && command to execute the command after "Yes"
	[ "$(printf "No\\nYes" | dmenu -fn "$DANGERFONT" -i -p "$1" -nb darkred -sb red -sf white -nf gray -h 18)" = "Yes" ]
}


## TOOL FUNCTIONS

# Exit actions when press ESC in menu
escape () {
	[ -n "$1" ] || return
}

# Store every move between directories into history
dmenufm_history () {
	[ ! -d "$FM_PATH" ] && mkdir -p "$FM_PATH"
	dirmark=$(printf '%s' "$PWD" | awk -F '/' '{print $NF}')
	printf '%s\n' "$dirmark - $PWD" | sed "/^$/ d" >> "$HISFILE"
	# Limit the max number of history
	hisnum=$(wc -l "$HISFILE" | awk '{print $1}')
	if [ "$hisnum" -ge "$MAX_HIS_LENGTH" ]; then
		sed "1d" "$HISFILE" > "$HISFILE.backup" && cp "$HISFILE.backup" "$HISFILE"
	fi
}



# Actions that for dmenufm
# Note: Use `[ -n "$VAR" ]` after each menu to check whether the menu is correctly execute.
# 	If not, then the later command will not execute.
dmenufm_action (){
	move=$(printf '%s' "$ACTLIST" | tr ':' '\n' | verticalprompt "Actions:" "#005577")
	case $move in
		"$FM_CP_PATH")
			# Copy path to xclip, and send notification.
			Generate_action_menu "Copy directory/file path: " "#33691e" || return
			[ -n "$HERE" ] && printf '%s' "$HERE" | xclip -selection clipboard && notifyprompt "Path $name copied to clipboard."
			;;
		"$FM_NEW")
			name=$(horizontalprompt "Dir ends w/ slash; File w/o: " "#33691e") || return
			if [ -n "$( printf "$name" | grep '/')" ]; then
				mkdir -p "$name" && notifyprompt "Directory $name created."
			else
				:>"$name" && notifyprompt "File $name created."
			fi
			;;
		"$FM_MVR")
			Generate_action_menu "Source: " "#33691e" || return
			[ -n "$HERE" ] && start="$HERE" && startname="$name" && rename="true"
			[ -d "$start" ] && cd "../"
			[ -n "$start" ] && Generate_action_menu "Destination / Type rename: " "#FF8C00" || return && rename=
			[ -n "$HERE" ] && destination="$HERE" && destname="$name"
			[ -n "$HERE" ] && mv "$start" "$destination" && notifyprompt "$startname moved to $destname"
			rename=
			;;
		"$FM_RM")
			# Choose file/directory in current directory to remove
			Generate_action_menu "Remove file / directory: " "#33691e" || return
			# Check the chosen on is directory or not
			[ -n "$HERE" ] && [ -d "$HERE" ] && result=$?
			if [ -n "$HERE" ] && dangerprompt "Remove all files and/or subdirectories in $name?" && rm -rf "$HERE"; then
				# If chosen one is directory, send notification and cd to parent directory
				if [ $result -eq 0 ]; then
					notifyprompt "$name removed." || return
					cd "../" || return
					# Reset result value
					result=
				else
					# If not, just send notification.
					notifyprompt "$name removed." || return
				fi
			else
				return
			fi

			;;
		"$FM_TRASH")
			[ ! -d "$FM_TRASH_PATH" ] && mkdir -p "$FM_TRASH_PATH"
			trashmenu=$(printf '%s\n' "Move to trash" "Go to trash" "Empty trash" | sed "/^$/ d" | verticalprompt "Dmenufm Trash" "#005577")
			case $trashmenu in
				"Move to trash")
					Generate_action_menu "Move file/directory to trash: " "#33691e" || return
					# Check the chosen on is directory or not
					[ -n "$HERE" ] && [ -d "$HERE" ] && result=$?
					# Say yes in dangerprompt, and send notification. Or do nothing.
					if [ -n "$HERE" ] && dangerprompt "Move all files and/or subdirectories in $name to trash?" && mv "$HERE" "$FM_TRASH_PATH"; then
						if [ $result -eq 0 ]; then
							notifyprompt "$name moved to trash." || return
							cd "../" || return
							result=
						else
							notifyprompt "$name moved to trash." || return
						fi
					else
						return
					fi
					;;
				"Go to trash")
					cd "$FM_TRASH_PATH" || return
					;;
				"Empty trash")
					# Lesson: You cannot quote a wildcard. No quote on *.
					if dangerprompt "Remove all files and/or directory in trash?" && rm -rf "$FM_TRASH_PATH"/*; then
						notifyprompt "Trash is empty." || return
					else
						return
					fi
					;;
			esac
			;;
		"$FM_HIST")
			# Use sed command to mimic reverse of cat for POSIX.
			goto=$(sed '1!G;h;$!d' "$HISFILE" | verticalprompt "Dmenufm History" "#005577")
			destination=$(printf '%s' "$goto" | awk -F ' - ' '{print $2}')
			cd "$destination" || return
			;;
		"$FM_BMARK")
			markmenu=$(printf '%s\n' "$(cat "$BMKFILE")" "Add BMK" "Delete BMK" | sed "/^$/ d" |  verticalprompt "Dmenufm Bookmark" "#005577")
			case "$markmenu" in
				"Add BMK")
					Generate_action_menu "Choose file/directory and add to BMK: " "#33691e" || return
					mark=$(printf '%s' "$HERE" | awk -F '/' '{print $NF}')
					[ -n "$mark" ] && printf '%s\n' "$mark - $HERE" >> "$BMKFILE"
					[ -n "$mark" ] && sed "/^$/ d" "$BMKFILE" >  "$BMKFILE.backup" && cp "$BMKFILE.backup" "$BMKFILE"
					;;
				"Delete BMK")
					delbmk=$(< "$BMKFILE" verticalprompt "Delete chosen bmk: " "darkred") || return
					# POSIX way of sed -i.
					# Assign address as '=' by '\=pattern='
					# Create backup file and cp to original file.
					[ -n "$delbmk" ] && sed "\=$delbmk= d" "$BMKFILE" > "$BMKFILE.backup" && cp "$BMKFILE.backup" "$BMKFILE"
					;;
				*)
					destination=$(printf '%s' "$markmenu" | awk -F ' - ' '{print $2}')
					if [ -n "$destination" ]; then
						cd "$destination" || openfile "$destination"
					fi
			esac
			;;
		"$FM_COMMAND")
			cmdmenu=$(printf '%s\n' "$(cat "$CMDFILE")" "Add CMD" "Delete CMD" "Type and execute" | sed "/^$/ d" | verticalprompt "Dmenufm Custom Command" "#005577")
			case "$cmdmenu" in
				"Add CMD")
					addcmd=$(horizontalprompt "Recording your command: " "#33691e") || return
					desp=$(horizontalprompt "Enter command description: " "#33691e") || return
					[ -n "$addcmd" ] && printf '%s\n' "$addcmd - $desp" >> "$CMDFILE"
					[ -n "$addcmd" ] && sed "/^$/ d" "$CMDFILE" >  "$CMDFILE.backup" && cp "$CMDFILE.backup" "$CMDFILE"
					;;
				"Delete CMD")
					delcmd=$(< "$CMDFILE" verticalprompt "Delete chosen command: " "darkred")
					# POSIX way of sed -i.
					# Assign address as '+' by '\+pattern+'
					# '=' seems not usable in command
					# Create backup file and cp to original file.
					[ -n "$delcmd" ] && sed "\+$delcmd+ d" "$CMDFILE" > "$CMDFILE.backup" && cp "$CMDFILE.backup" "$CMDFILE"
					;;
				"Type and execute")
					execmd=$(horizontalprompt "Type and execute: " "#33691e")
					[ -n "$execmd" ] && executecmd "$execmd"
					;;
				*)
					execmd=$(printf '%s' "$cmdmenu" | awk -F ' - ' '{print $1}')
					executecmd "$execmd"
					;;
			esac
			;;
	esac
	dmenufm_menu
}

### MAIN FUNCTIONS

dmenufm_menu () {
	while [ -n "$CHOICE" ]; do
		update_menu
		# Default menu list if no arguments given
		[ -z "$keeplist" ] && menu && list="$DIRs$FILEs$DOTDIRs$DOTFILEs"
		# Generate menu with/without arguments
		# Show only the current directory and one level of parent directory
		twopwd=$(printf '%s' "$PWD" | awk -F '/' '{print $(NF-1)"/"$NF}')
		CHOICE=$(printf '%s:' "$BACKWARD" "$TARGET" "$ACTION" "$TERM" "$list" | tr ':' '\n' | sed "s/'//g; /^$/ d" | verticalprompt "$twopwd" "#005577")
		# Outcome matching
		if [ "$CHOICE" = "$TARGET" ]; then
			openfile "$PWD"
		elif [ "$CHOICE" = "$BACKWARD" ]; then
			cd "../"
			dmenufm_history
		elif [ "$CHOICE" = "$ACTION" ]; then
			dmenufm_action
		elif [ "$CHOICE" = "$TERM" ]; then
			$TERMINAL
		elif [ -d "$CHOICE" ]; then
			cd "$CHOICE" || exit 1
			dmenufm_history
			continue
		elif [ -f "$CHOICE" ]; then
			xdg-open "$PWD/$CHOICE"
		else
			break
		fi
	done
}

### ARGUMENTS

while [ -n "$1" ]; do
	case $1 in
		"-d"|"--directory" )
			keeplist="${keeplist} DIRs"
			;;
		"-f"|"--file" )
			keeplist="${keeplist} FILEs"
			;;
		"-D"|"--dotdirectory" )
			keeplist="${keeplist} DOTDIRs"
			;;
		"-F"|"--dotfile" )
			keeplist="${keeplist} DOTFILEs"
			;;
		"-p"|"--lastpath" )
			outputpath="placeholder"
			;;
		"-h"|"--help" )
			printf " Optional arguments for custom usage:
			-d | --directory: only directories
			-f | --file: only show files
			-D | --dotdirectory: only show hidden directories
			-F | --dotfile: only show hidden files
			-p | --lastpath: opens in last working directory (cd on exit)
			-h | --help: Show this message\\n"
			exit 0
			;;
		"*" )
			printf "Invalid option"
			exit 1
			;;
	esac
	shift
done

### RUN THE MAIN FUNCTION

# --lastpath option:
[ -n "$outputpath" ] && cd "$(cat "$LASTPATHFILE")"

dmenufm_menu

printf '%s' "$PWD" > "$LASTPATHFILE"
