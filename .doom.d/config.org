#+title: Doom Emacs Config
#+author: Mark Bojack
#+email: markbojack.si@gmail.com
#+date: @@html:<!--@@{{{git-rev}}}@@html:-->@@@@latex:\\\large\bfseries@@ {{{modification-time(%y-%m-%d, t)}}} @@latex:\\\normalsize\mdseries@@{{{modification-time(%h:%m, t)}}} @@latex:\acr{\lowercase{@@{{{timezone}}}@@latex:}}\iffalse@@, {{{git-rev}}}@@latex:\fi@@
#+macro: timezone (eval (substring (shell-command-to-string "date +%z") 0 -1))
#+description: personal config.org document for doom emacs (v2.0.9)
#+startup: overview
#+property: header-args:emacs-lisp :tangle yes :comments link
#+property: header-args:shell :tangle "setup.sh"
#+property: header-args :tangle no :results silent :eval no-export
#+options: coverpage:yes

* Background
** Update Frequency
Continually maintained on an Arch-based system.

** Credit
For additional inspiration, or to see how I pasted together this config, check the [[Sources][Sources]] section

** For new users
- This is a literate config, so it generates =init.el= and =packages.el=
- You can either place all config files in this folder into =~/.doom.d= (or =~/.config/doom=), or just copy =config.org= and uncomment `literate` in =init.el=, if not done already
- As you know, if =init.el= or =packages.el= are modified, run ~doom/reload~ with =SPC h r r=
- Modifying =config.org=
  + Modifications to this file will be realized after running the edited code block with =C-c C-c=
  + In some cases though, ~doom/restart-and-restore~ (=SPC q r=) will be needed

** Charming, little quirks
*** R
If R fails to work properly for whatever reason, try =SPC q r= as a preliminary measure

*** Startup warning
- ~Package cl is deprecated~, for now, always appears at Doom startup because one of my beloved packages calls =cl=, which is not used by Doom (it uses =cl-lib=)
- This matter was declared a "no-fix" bug, and the solution provided on [[https://github.com/kiwanami/emacs-epc/issues/35][this site]] does not fix the issue anymore (/womp womp/)

** Let's get started
According to [[https://nullprogram.com/blog/2016/12/22/][Chris Wellons]], the below makes this config run a little faster.

#+begin_src emacs-lisp
;;; config.el -*- lexical-binding: t; -*-
#+end_src

* Configs
** init.el
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       (ivy +fonts +childframe)               ; a search engine for love and life

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; ðŸ™‚
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       (ligatures +extras)         ; ligatures and symbols to make your code pretty again
       minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       (ibuffer +icons)        ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +aspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       ;;lsp
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;cc                ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +org-bullets)               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       (mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))
#+end_src

** packages.el
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")

;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)

(package! org-fancy-priorities)
(package! org-super-agenda)
(package! org-brain)
(package! org-bullets)

(package! evil-multiedit)
(package! polymode)

(package! flycheck-aspell)

(package! emojify)

(package! elpher)
(package! elfeed-goodies)

(package! dired-open)
(package! peep-dired)

(package! rainbow-mode)
(package! resize-window)
(package! dmenu)
;; (package! centaur-tabs) ; or just use tabs in init.el

(package! password-store)

;; dt packages
;; (package! async)
;; (package! calfw)
;; (package! calfw-org)
;; (package! dashboard)
;; (package! exwm)
;; (package! hyperbole)
;; (package! ivy-posframe)
;; (package! mastodon)
;; (package! ox-gemini)
;; (package! tldr)
;; (package! wc-mode)
#+end_src

* Defaults
** setq-default
Selected variable settings from [[https://github.com/angrybacon/dotemacs][Mathieu Marques']] "Better Defaults."
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function 'insert-tab)

#+begin_src emacs-lisp
(setq-default cursor-in-non-selected-windows nil        ; hide the cursor in inactive windows
              custom-unlispify-menu-entries nil         ; prefer kebab-case for titles
              custom-unlispify-tag-names nil            ; prefer kebab-case for symbols
              delete-by-moving-to-trash t               ; delete files to trash
              fill-column 80                            ; set width for automatic line breaks
              help-window-select t                      ; focus new help windows when opened
              initial-scratch-message ""                ; empty the initial *scratch* buffer
              mouse-yank-at-point t                     ; yank at point rather than pointer
              read-process-output-max (* 1024 1024)     ; increase read size per process
              recenter-positions '(5 top bottom)        ; set re-centering positions
              scroll-conservatively 101                 ; avoid recentering when scrolling far
              scroll-margin 2                           ; add a margin when scrolling vertically
              show-help-function nil                    ; disable help text everywhere
              tab-width 4                               ; smaller width for tab characters
              uniquify-buffer-name-style 'forward       ; better than filename<2> for same-name buffers
              window-combination-resize t               ; take new window space from all windows (not just current)
              x-stretch-cursor t)                       ; stretch cursor to the glyph width
#+end_src

** setq
~gc-cons-threshold~ is a [[https://github.com/daviwil][David Wilson]] trick: "Make gc pauses faster by decreasing the threshold." David's figure was modified in concordance with the config of [[https://github.com/angrybacon/dotemacs][Mathieu Marques]].

I'm still experimenting with the ess variables; [[https://stackoverflow.com/questions/53769315/emacs-ess-indent-after][explanation here]].

#+begin_src emacs-lisp
(setq doom-theme 'doom-one
      display-line-numbers-type 'relative
      evil-split-window-below t
      evil-vsplit-window-right t
      gc-cons-threshold (* 8 1024 1024)
      auto-save-default t
      make-backup-files t
      confirm-kill-emacs nil                    ; just shutdown without message
      ;; ess-offset-continued '(straight 4)        ; indent after pipe, etc
      ess-indent-offset 4                       ; indent all lines
      undo-limit 80000000                       ; increase undo storage to 80mib
      truncate-string-ellipsis "â€¦"              ; unicode ellispis are nicer than "...", and also save /precious/ space
      password-cache-expiry nil)                ; i can trust my computers ... can't i?
#+end_src

** Miscellaneous
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)           ; Replace yes/no prompts with y/n
(global-subword-mode t)                 ; Iterate through CamelCase words
(mouse-avoidance-mode 'exile)           ; Avoid collision of mouse with point
(put 'downcase-region 'disabled nil)    ; Enable downcase-region C-x C-l
(put 'upcase-region 'disabled nil)      ; Enable upcase-region C-x C-u
(set-default-coding-systems 'utf-8)     ; Default to utf-8 encoding
(display-time-mode 1)                             ; Enable time in the mode-line
(unless (string-match-p "^Power N/A" (battery))   ; On laptops...
  (display-battery-mode 1))                       ; it's nice to know how much power you have
#+end_src


* Font
From [[https://gitlab.com/dwt1][Derek Taylor's]] config:
+ 'doom-font' -- standard monospace font that is used for most things in Emacs.
+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.
+ 'font-lock-comment-face' -- for comments.
+ 'font-lock-keyword-face' -- for keywords with special significance like 'setq' in elisp.
+ 'global-prettify-symbols-mode' -- change certain keywords to symbols, such as lambda!

'global-prettify-symbols-mode' note above is retained just for reference.

I can't customize doom-big-font ðŸ˜­

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "RobotoMono Nerd Font" :size 10 :weight 'bold)
      ;; doom-big-font (font-spec :family "RobotoMono Nerd Font" :size 14))
      doom-variable-pitch-font (font-spec :family "sans" :size 13))

(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))

(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

* Fullscreen
Increases the robustness of the fullscreen setting across various DEs/WMs.
Some window managers may not understand/work with =maximized= (or may not produce the desired effect), in that case try ~fullboth~ or ~fullscreen~.
[[https://emacs.stackexchange.com/questions/2999/how-to-maximize-my-emacs-frame-on-start-up][Here is more info.]]

#+begin_src emacs-lisp
(pcase window-system
  ('w32 (set-frame-parameter nil 'fullscreen 'fullboth))
  (_ (set-frame-parameter nil 'fullscreen 'maximized)))

;; (add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

* Mappings
Mostly from [[https://github.com/zaiste/][Jakub Neander]].

#+begin_src emacs-lisp
(map! :desc "Create Sparse Tree" :ne "SPC / s" #'org-sparse-tree)
(map! :desc "Create Sparse Tree for Tags" :ne "SPC / t" #'org-tags-sparse-tree)
(map! :ne "M-/" #'comment-or-uncomment-region)
(map! :ne "SPC n r" #'deadgrep)
(map! :ne "SPC n b" #'org-brain-visualize)
(map! :ne "SPC n p" #'counsel-org-capture)
(map! :ne "M-u" #'mu4e-update-index)
#+end_src

* Personal Information
#+begin_src emacs-lisp
(setq user-full-name "Mark Bojack"
      user-mail-address "markbojack.si@gmail.com")
#+end_src

* Sources
- [[https://nullprogram.com/blog/2016/12/22/][Chris Wellons]]
- [[https://github.com/daviwil][David Wilson]]
- [[https://gitlab.com/dwt1][Derek Taylor]]
- [[https://discord.com/channels/406534637242810369/579041038669447178][Discord]]
- [[https://github.com/hlissner][Henrik Lissner]]
- [[https://github.com/zaiste/][Jakub Neander]]
- [[https://github.com/jwiegley/dot-emacs/][John Wiegley]]
- [[https://github.com/angrybacon/dotemacs][Mathieu Marques]]
- [[https://www.reddit.com/r/DoomEmacs/][r/DoomEmacs]]
- [[https://www.reddit.com/r/emacs/][r/emacs]]
- [[https://www.reddit.com/r/emacsporn/][r/emacsporn]]
- [[https://www.reddit.com/r/orgmode/][r/orgmode]]
- [[https://github.com/sachac][Sacha Chua]]
- [[https://emacs.stackexchange.com/][Stack Exchange]]
- [[https://github.com/tecosaur/emacs-config][tecosaur]]
- [[https://github.com/rememberYou][Terencio Agozzino]]
- [[https://www.emacswiki.org/][Wiki]]

* Spelling
Thanks [[https://www.reddit.com/r/emacs/comments/mr3urh/disable_spellfumode_in_doomemacs/][Reddit]]!  Disable spell-fu-mode, then re-add other hooks selectively.

#+begin_src emacs-lisp
(remove-hook 'text-mode-hook #'spell-fu-mode)
(add-hook 'markdown-mode-hook #'spell-fu-mode)
#+end_src

* =ess/R= :TODO:

TODO: some alternatives (deprecated?) if scroll-down-aggressively is bad
  (setq comint-prompt-read-only t)
  (setq comint-scroll-to-bottom-on-input t)
  (setq comint-scroll-to-bottom-on-output t)
  (setq comint-move-point-for-output t)





For working with =.org= files, we should keep some settings in mind.

To get blocks (in R, they are often referred to as "chunks" instead) to talk to each other, you need the ~:session~ header.

If ~:results~ is set to ~"output"~, then the output will be shown in an =.org= file below the chunk, as well as in the console.  If set to ~"value"~ however, there will be minimal inline output, but full console output.

To create inline plots, use the below header, which will also output a =.png= file (plotting inline always requires the making of a file):
~#+BEGIN_SRC R :file <filename>.png :results file graphics~

In order to export to an HTML document with =C-c C-e h h=, you need this header (where each plot will need a dedicated file):
~#+BEGIN_SRC R :file <filename>.png :results file graphics :exports both~

~scroll-down-aggressively~ does not apply to =.org= files, but instead just forces the console output window to always show the most recent output to avoid scrolling down.

#+begin_src emacs-lisp
(setq org-babel-default-header-args:r '((:session)
                                        (:results . "output")))
(setq scroll-down-aggressively 0.01)
#+end_src

* =mu4e=
Some quick notes:
- ~mu4e-index-update-in-background~ is needed for Gmail to work
- I take advantage of the ~-c~ flag for ~mbsync~ because I also have =neomutt= installed
- ~mu4e-index-update-error-warning nil~ is needed if your =~/.mbsyncrc= contains the follwing line of code (I just use =pass=, so I don't need this): ~PassCmd "gpg2 -q --for-your-eyes-only --no-tty -d ~/.password-store/your@gmail.com.gpg'~

#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e/")

(setq mu4e-index-update-in-background t
      mu4e-get-mail-command "mbsync -a -c ~/p-dot-script/.mbsyncrc"
      mu4e-update-interval (* 1 60)
      mu4e-attachment-dir "~/Downloads"
      mu4e-compose-signature (concat "Mark Bojack\n" "https://github.com/markbojack\n" "Sent with mu4e from Doom Emacs\n")
      mu4e-main-buffer-hide-personal-addresses t
      mu4e-drafts-folder "/[Gmail]/Drafts"
      mu4e-sent-folder   "/[Gmail]/Sent Mail"
      mu4e-refile-folder "/[Gmail]/All Mail"
      mu4e-trash-folder  "/[Gmail]/Trash"
      mu4e-maildir-shortcuts
      '((:maildir "/Inbox"    :key ?i)
        (:maildir "/[Gmail]/Sent Mail" :key ?s)
        (:maildir "/[Gmail]/Trash"     :key ?t)
        (:maildir "/[Gmail]/Drafts"    :key ?d)
        (:maildir "/[Gmail]/All Mail"  :key ?a))
      mu4e-bookmarks
      '((:name "Family" :query "from:Bojack" :key ?f :hide t)
        (:name "Today's messages" :query "date:today..now" :key ?t :hide nil)))
#+end_src

* =smtpmail=
This code block is essential to getting Gmail to work with =mu4e=.

#+begin_src emacs-lisp
(setq starttls-use-gnutls t
      smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
      smtpmail-auth-credentials '(("smtp.gmail.com" 587 "markbojack.si@gmail.com" nil))
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587)
#+end_src

* =org= :TODO:

TODO: is this an alternative to org-agenda-files or is it deprecated?
(setq +org-capture-todo-file "tasks.org")
TODO: see if fancy priorities work else see zaiste vid

#+begin_src emacs-lisp
(setq org-directory "~/Documents/org/"

      ;; org-agenda-files (directory-files-recursively "~/Documents/org/" "\.org$")  ;; make everything an agenda file
      org-agenda-files '("~/Documents/org/remind.org")
      ;; overview         top-level headlines only
      ;; content          all headlines
      ;; showall          no folding of any entries
      ;; showeverything   show even drawer contents
      org-startup-folded t
      org-link-search-must-match-exact-headline nil     ;; target words with a link
      org-highest-priority ?A
      org-default-priority ?B
      org-lowest-priority ?C                            ;; does this really have to be ?E by default?
      org-ellipsis " â–¾ "
      org-bullets-bullet-list '("Â·")
      org-tags-column -80
      org-agenda-files (ignore-errors (directory-files +org-dir t "\\.org$" t))
      org-log-done 'time
      org-refile-targets (quote ((nil :maxlevel . 1)))
      org-tags-column -80
      org-agenda-skip-scheduled-if-done t
      org-priority-faces '((65 :foreground "#e45649")   ;; 65 in ASCII is A, etc or type ?A, ?B, etc
                           (66 :foreground "#da8548")
                           (67 :foreground "#0098dd"))
      org-capture-templates '(("x" "Note" entry
                               (file+olp+datetree "journal.org")
                               "**** [ ] %U %?" :prepend t :kill-buffer t)
                              ("t" "Task" entry
                               (file+headline "tasks.org" "Inbox")
                               "* [ ] %?\n%i" :prepend t :kill-buffer t)))

;; Fancy priorities mode
;; (setq org-fancy-priorities-list '("âš¡" "â¬†" "â¬‡" "â˜•"))
(setq org-fancy-priorities-list '("ï„‘" "ï„‘" "ï„‘"))

;; (add-hook! 'org-mode-hook #'+org-pretty-mode #'mixed-pitch-mode)  ;;  i don't like this
(add-hook! 'org-mode-hook (company-mode -1))
(add-hook! 'org-capture-mode-hook (company-mode -1))
(add-hook! 'org-mode-hook (org-fancy-priorities-mode))

(set-popup-rule! "^\\*Org Agenda" :side 'bottom :size 0.90 :select t :ttl nil)
(set-popup-rule! "^CAPTURE.*\\.org$" :side 'bottom :size 0.90 :select t :ttl nil)

(after! org
  (set-face-attribute 'org-link nil
                      :weight 'normal
                      :background nil)
  (set-face-attribute 'org-code nil
                      :foreground "#a9a1e1"
                      :background nil)
  (set-face-attribute 'org-date nil
                      :foreground "#5B6268"
                      :background nil)
  (set-face-attribute 'org-level-1 nil
                      :foreground "steelblue2"
                      :background nil
                      :height 1.2
                      :weight 'bold)
  (set-face-attribute 'org-level-2 nil
                      :foreground "slategray2"
                      :background nil
                      :height 1.0
                      :weight 'bold)
  (set-face-attribute 'org-level-3 nil
                      :foreground "SkyBlue2"
                      :background nil
                      :height 1.0
                      :weight 'bold)
  (set-face-attribute 'org-level-4 nil
                      :foreground "DodgerBlue2"
                      :background nil
                      :height 1.0
                      :weight 'bold)
  (set-face-attribute 'org-level-5 nil
                      :weight 'bold)
  (set-face-attribute 'org-level-6 nil
                      :weight 'bold)
  (set-face-attribute 'org-document-title nil
                      :foreground "SlateGray1"
                      :background nil
                      :height 1.75
                      :weight 'bold))
#+end_src

* =org-super-agenda= :TODO:
TODO see if this works; if not, review zaiste video
Check out this package on [[https://github.com/alphapapa/org-super-agenda][Github]] for lots more info.

#+begin_src emacs-lisp
(after! org-agenda
  (setq org-super-agenda-mode t
        org-super-agenda-groups '((:name "Today"
                                   :time-grid t
                                   :scheduled today)
                                  (:name "Due today"
                                   :deadline today)
                                  (:name "Important"
                                   :priority "A")
                                  (:name "Overdue"
                                   :deadline past)
                                  (:name "Due soon"
                                   :deadline future)
                                  (:name "Big Outcomes"
                                   :tag "bo"))))
#+end_src

* =org-brain=
Check out the [[https://github.com/Kungsgeten/org-brain][Github]].

#+begin_src emacs-lisp
(use-package org-brain
  :ensure t
  :init
  (with-eval-after-load 'evil
    (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
  :config
  (bind-key "C-c b" 'org-brain-prefix-map org-mode-map)
  (setq org-id-track-globally t)
  (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
  (add-hook 'before-save-hook #'org-brain-ensure-ids-in-buffer)
  (set-popup-rule! "^\\*org-brain" :side 'right :size 1.00 :select t :ttl nil)
  (push '("b" "Brain" plain (function org-brain-goto-end)
          "* %i%?" :empty-lines 1)
        org-capture-templates)
  (setq org-brain-visualize-default-choices 'all)
  (setq org-brain-title-max-length 12)
  (setq org-brain-include-file-entries nil
        org-brain-file-entries-use-title nil))
#+end_src
